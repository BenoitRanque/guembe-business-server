const pg = require('utils/pg')

module.exports = async function ({ invoice_id, update }, pgClient = null) {
  const db = pgClient === null ? pg : pgClient

 // check if all update properties are valid fields
  const allowedUpdateColumns = [
    'id',
    'timestamp',
    'link',
    'numero',
    'comprador',
    'razonSocial',
    'listaItems',
    'autorizacion',
    'montoTotal',
    'descuentos',
    'sinCredito',
    'control',
    'tipoCompra',
    'terminosPago'
  ]

  let updateFields = []
  let updateValues = []

  Object.keys(update).forEach(column => {
    if (allowedUpdateColumns.includes(column) && update[column] !== null) {
      updateFields.push(`izi_${column.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase()}`)
      updateValues.push(update[column])
    }
  })

  if (updateFields.length === 0) {
    throw new Error(`Atempted to update local invoice with no update columns specified`)
  }

  const { rows: [ updatedInvoice ] } = await db.query(`
    UPDATE accounting.invoice
    SET ${updateFields.map((column, index) => `${column} = $${index + 2}`).join(', ')}
    WHERE accounting.invoice.invoice_id = $1
    RETURNING invoice_id, ${updateFields.join(', ')}
  `, [
    invoice_id,
    ...updateValues
  ])

  return updatedInvoice
}
