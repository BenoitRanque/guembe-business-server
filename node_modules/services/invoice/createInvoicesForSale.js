const pg = require('utils/pg')

module.exports = async function ({ sale_id  }, pgClient = null) {
  const db = pgClient === null ? pg : pgClient

  await db.query(/*sql*/`
    WITH invoices (invoice_id, economic_activity_id, business_name, tax_identification_number, total) AS (
      SELECT
      gen_random_uuid() AS invoice_id,
        webstore.product.economic_activity_id,
        COALESCE(account.client.business_name, 'SIN NOMBRE'),
        COALESCE(account.client.tax_identification_number, '0'),
        SUM(webstore.sale_listing.quantity
          * webstore.listing_product.quantity
          * webstore.listing_product.price) AS total
      FROM webstore.sale
      LEFT JOIN account.client USING (client_id)
      LEFT JOIN webstore.sale_listing USING (sale_id)
      LEFT JOIN webstore.listing_product USING (listing_id)
      LEFT JOIN webstore.product USING (product_id)
      WHERE webstore.listing_product.price > 0
      AND webstore.sale_listing.sale_id = $1
      GROUP BY
        webstore.product.economic_activity_id,
        account.client.business_name,
        account.client.tax_identification_number
    ), inserted_invoices AS (
      INSERT INTO accounting.invoice (invoice_id, economic_activity_id, business_name, tax_identification_number, total)
      SELECT invoice_id, economic_activity_id, business_name, tax_identification_number, total
      FROM invoices
    ), inserted_invoice_items AS (
      INSERT INTO accounting.invoice_item (invoice_id, index, name, quantity, price)
      SELECT
        invoices.invoice_id,
        ROW_NUMBER () OVER (PARTITION BY invoices.invoice_id) AS index,
        webstore.product_i18n.name AS name, -- get names from i18n
        webstore.listing_product.quantity * webstore.sale_listing.quantity AS quantity,
        webstore.listing_product.price AS price
      FROM webstore.sale
      LEFT JOIN webstore.sale_listing USING (sale_id)
      LEFT JOIN webstore.listing_product USING (listing_id)
      LEFT JOIN webstore.product USING (product_id)
      LEFT JOIN invoices USING (economic_activity_id)
      LEFT JOIN account.user USING (user_id)
      LEFT JOIN webstore.product_i18n USING (product_id, locale_id)
      WHERE webstore.listing_product.price > 0
      AND webstore.sale_listing.sale_id = $1
    ) INSERT INTO webstore.sale_invoice (sale_id, invoice_id)
    SELECT $1, invoice_id
    FROM invoices
    RETURNING invoice_id
  `, [ sale_id ])
}
