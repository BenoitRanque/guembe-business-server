const pg = require('utils/pg')

module.exports = async function ({ payment_id, update }, pgClient = null) {
  const db = pgClient === null ? pg : pgClient

  // check if all update properties are valid fields
  const allowedUpdateColumns = [
    'payment_id',
    'payment_url',
    'simplified_transfer_url',
    'transfer_url',
    'webpay_url',
    'app_url',
    'ready_for_terminal',
    'notification_token',
    'receiver_id',
    'conciliation_date',
    'subject',
    'amount',
    'currency',
    'status',
    'status_detail',
    'body',
    'picture_url',
    'receipt_url',
    'return_url',
    'cancel_url',
    'notify_url',
    'notify_api_version',
    'expires_date',
    'bank',
    'bank_id',
    'payer_name',
    'payer_email',
    'personal_identifier',
    'bank_account_number',
    'out_of_date_conciliation',
    'transaction_id',
    'responsible_user_email',
    'send_reminders',
    'send_email',
    'payment_method'
  ]

  let updateFields = []
  let updateValues = []

  Object.keys(update).forEach(column => {
    if (allowedUpdateColumns.includes(column) && update[column] !== null) {
      updateFields.push(`khipu_${column}`)
      updateValues.push(update[column])
    }
  })

  if (updateFields.length === 0) {
    throw new Error(`Atempted to update local payment with no update columns specified`)
  }

  const updatedFieldsList = updateFields.map((column, index) => `${column} = $${index + 2}`).join(', ')

  const { rows: [ updatedPayment ] } = await db.query(`
    UPDATE accounting.payment
    SET ${updatedFieldsList}
    WHERE accounting.payment.payment_id = $1
    RETURNING payment_id, amount, ${updateFields.join(', ')};
  `, [
    payment_id,
    ...updateValues
  ])

  return updatedPayment
}

