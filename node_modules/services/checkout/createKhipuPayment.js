const pg = require('utils/pg')
const khipu = require('utils/khipu')

module.exports = async function createKhipuPayment ({ payment_id, amount, sale_id, user_id }, pgClient = null) {
  const { payer_name, payer_email } = await getPayerDetails({ user_id }, pgClient)
  const body = await getPaymentBody({ sale_id }, pgClient)

  const {
    payment_id: khipu_payment_id,
    payment_url: khipu_payment_url,
    app_url: khipu_app_url,
    ready_for_terminal: khipu_ready_for_terminal
    // pay_me_url is also returned,
    // but not in khipu documentation for some reason. discarding
    // pay_me_url: khipu_pay_me_url
  } = await khipu.postPayments({
    transaction_id: payment_id,
    currency: 'BOB',
    notify_api_version: '1.3',
    amount: Number(amount / 100).toFixed(2), // we locally store payment amount in cents, but kiphu uses wholes.
    subject: 'Pago por compra en linea',
    body,
    cancel_url: `https://${process.env.PUBLIC_HOSTNAME}/webstore/sale/${sale_id}`,
    return_url: `https://${process.env.PUBLIC_HOSTNAME}/webstore/sale/${sale_id}`,
    notify_url: `https://${process.env.PUBLIC_HOSTNAME}/api/v1/hooks/khipu/notify`,
    picture_url: `https://${process.env.PUBLIC_HOSTNAME}/icons/isologo.png`,
    payer_name,
    payer_email
  })

  return {
    khipu_payment_id,
    khipu_payment_url,
    khipu_app_url,
    khipu_ready_for_terminal
  }
}

async function getPayerDetails({ user_id }, pgClient = null) {
  const db = pgClient === null ? pg : pgClient

  const { rows: [ payer ] } = await db.query(`
    SELECT
      account.user.name AS payer_name,
      account.user.email AS payer_email
    FROM account.user
    WHERE account.user.user_id = $1
  `, [ user_id ])

  return payer
}

async function getPaymentBody ({ sale_id }, pgClient = null) {
  const db = pgClient === null ? pg : pgClient
  // return a string to be used as payment body/description for end user
  // ideally localize

  // old function for reference
  // async function getPaymentBody(payment_id, pg) {
  //   const { rows: details } = await pg.query(`
  //     SELECT
  //       store.product.public_name AS product,
  //       store.listing_product.price AS price,
  //       SUM(store.purchase_listing.quantity * store.listing_product.quantity) AS quantity
  //     FROM store.payment
  //     LEFT JOIN store.purchase_listing ON store.payment.purchase_id = store.purchase_listing.purchase_id
  //     LEFT JOIN store.listing_product ON store.purchase_listing.listing_id = store.listing_product.listing_id
  //     LEFT JOIN store.product ON store.listing_product.product_id = store.product.product_id
  //     WHERE store.payment.payment_id = $1
  //     GROUP BY store.product.product_id, store.product.public_name, store.listing_product.price;
  //   `, [payment_id])

  //   return [
  //     `Articulo\tPrecio\tCantidad\tSubtotal`,
  //     ...details.map(({ product, quantity, price }) => `${product}\t${Number(price / 100).toFixed(2)}\t${quantity}\t${(price / 100) * quantity}`)
  //   ].join('\n')
  // }
  return 'payment body placeholder'
}

