const pg = require('utils/pg')
const { BadRequestError } = require('utils/errors')
module.exports = async function validateCheckout ({ user_id }, pgClient = null) {
  const db = pgClient === null ? pg : pgClient

  const { rows: listingsInCart } = await db.query(`
    SELECT 1
    FROM webstore.cart_listing
    WHERE webstore.cart_listing.user_id = $1;
  `, [ user_id ])

  if (!listingsInCart.length) {
    throw new BadRequestError(`Carrito vacio`)
  }

  const { rows: unavailableListings } = await db.query(`
    SELECT 1
    FROM webstore.cart_listing
    WHERE webstore.cart_listing.user_id = $1
    AND webstore.cart_listing.listing_id NOT IN (
      SELECT listing_id
      FROM webstore.listing
      WHERE webstore.listing.available_from <= NOW()
      AND webstore.listing.available_to >= NOW()
    );
  `, [ user_id ])

  if (unavailableListings.length) {
    throw new BadRequestError(`${unavailableListings.length} paquetes no disponibles`)
  }

  const { rows: outOfStockListing } = await db.query(`
    SELECT 1
    FROM webstore.cart_listing
    LEFT JOIN webstore.inventory ON webstore.inventory.listing_id = webstore.cart_listing.listing_id
    WHERE webstore.cart_listing.user_id = $1
    AND webstore.inventory.remaining IS NOT NULL
    AND webstore.inventory.remaining < webstore.cart_listing.quantity;
  `, [ user_id ])

  if (outOfStockListing.length) {
    throw new BadRequestError(`${outOfStockListing} paquetes agotados`)
  }

  // todo: validate at least one item with price over 0 in cart
}