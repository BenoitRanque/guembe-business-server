# production configuration. See docker-compose.override.yml from development specific configurations
version: '3.7'
services:
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    restart: on-failure
    volumes:
      - ./nginx/config:/etc/nginx/conf.d
      - ./public/static:/usr/share/nginx/html
      - ./public/certbot:/var/www/certbot
      - ./nginx/certs:/etc/letsencrypt
    networks:
      - app-network
  # deactivated certbot for now. Current certificated will be valid for a while
  # certbot:
  #   image: certbot/certbot
  #   container_name: certbot
  #   volumes:
  #     - ./nginx/certs:/etc/letsencrypt
  #     - ./nginx/public/certbot:/var/www/certbot
  #   depends_on:
  #     - nginx
  #   command: certonly --webroot --webroot-path=/var/www/certbot --email ranque.benoit@gmail.com --agree-tos --no-eff-email --force-renewal -d chuturubi.com  -d www.chuturubi.com
  postgres:
    image: postgres:11-alpine
    restart: always
    expose:
      - "5432"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${PG_DATABASE}
      POSTGRES_USER: ${PG_USERNAME}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./postgres:/var/lib/postgresql/data
    networks:
      - app-network
  pgadmin:
    image: dpage/pgadmin4:4.8
    restart: always
    depends_on:
      - postgres
    expose:
      - "80"
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    networks:
      - app-network
  graphql-engine:
    image: hasura/graphql-engine:v1.0.0-beta.2
    expose:
      - "8080"
    ports:
      - "6060:8080"
    depends_on:
      - "postgres"
    restart: always
    environment:
      HASURA_GRAPHQL_SERVER_PORT: 8080
      HASURA_GRAPHQL_SERVER_HOST: graphql-engine
      HASURA_GRAPHQL_DATABASE_URL: postgres://${PG_USERNAME}:${PG_PASSWORD}@postgres:5432/${PG_DATABASE}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_AUTH_HOOK: http://artemis:8080/api/v1/hooks/hasura/auth
      HASURA_GRAPHQL_AUTH_HOOK_MODE: GET
    networks:
      - app-network
  artemis:
    image: artemis:prod
    build:
      context: ./artemis
      args:
        NODE_ENV: production
    command: node src/index.js
    expose:
      - "8080"
    ports:
      - "9090:8080"
    restart: always
    environment:
      NODE_ENV: production
      PGHOST: postgres
      PGUSER: ${PG_USERNAME}
      PGDATABASE: ${PG_DATABASE}
      PGPASSWORD: ${PG_PASSWORD}
      PGPORT: 5432
      PUBLIC_HOSTNAME: ${PUBLIC_HOSTNAME}
      FILE_UPLOAD_DIRECTORY: /usr/app/uploads
      AUTH_JWT_SECRET: ${AUTH_JWT_SECRET}
      OAUTH_PROVIDER_FACEBOOK_CLIENT_ID: ${OAUTH_PROVIDER_FACEBOOK_CLIENT_ID}
      OAUTH_PROVIDER_FACEBOOK_CLIENT_SECRET: ${OAUTH_PROVIDER_FACEBOOK_CLIENT_SECRET}
      OAUTH_PROVIDER_GOOGLE_CLIENT_ID: ${OAUTH_PROVIDER_GOOGLE_CLIENT_ID}
      OAUTH_PROVIDER_GOOGLE_CLIENT_SECRET: ${OAUTH_PROVIDER_GOOGLE_CLIENT_SECRET}
      KHIPU_CLIENT_ID: ${KHIPU_CLIENT_ID}
      KHIPU_CLIENT_SECRET: ${KHIPU_CLIENT_SECRET}
      IZI_CLIENT_ID: ${IZI_CLIENT_ID}
      IZI_NIT_EMISOR: ${IZI_NIT_EMISOR}
    secrets:
          - IZI_PUBLIC_KEY
    depends_on:
      - postgres
    volumes:
      - ./public/uploads:/usr/app/uploads:rw
    networks:
      - app-network
# volumes:
#   certbot-etc:
#   certbot-var:
  # web-root:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     device: ./public
  #     o: bind
secrets:
  IZI_PUBLIC_KEY:
    file: ./nginx/certs/IZI_PUBLIC_KEY.pub
networks:
  app-network:
    driver: bridge